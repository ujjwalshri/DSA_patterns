You are given an Undirected Graph having unit weight, Find the shortest path from src to all the vertex and if it is unreachable to reach any vertex, then return -1 for that vertex.

Example:

Input:
n = 9, m= 10
edges=[[0,1],[0,3],[3,4],[4 ,5]
,[5, 6],[1,2],[2,6],[6,7],[7,8],[6,8]] 
src=0
Output:
0 1 2 1 2 3 3 4 4



-------> Optimal Code <-----
TC : O(n+2e);
SC : O(n);

class Solution {
    
    public int[] shortestPath(int[][] edges,int n,int m ,int src) {
        // Code here
        ArrayList<ArrayList<Integer>> adj = new ArrayList();
        for(int i = 0;i<n;i++){
            adj.add(new ArrayList());
        }
        // filling up the adj list of the undirected graph
        for(int i =0;i<edges.length;i++){
            adj.get(edges[i][0]).add(edges[i][1]);
            adj.get(edges[i][1]).add(edges[i][0]);
        }
        
        int []dis = new int[n];
        Arrays.fill(dis,(int)1e9);
        Queue<Integer> q = new LinkedList();
        dis[src]=0;
        q.offer(src);
        while(!q.isEmpty()){
            int node = q.poll();
            for(int it : adj.get(node)){
                if(dis[node]+1 < dis[it]){
                    dis[it]= dis[node]+1;
                    q.offer(it);
                }
            }
            
        }
        for(int i =0;i<dis.length;i++){
            if(dis[i]==(int)1e9){
                dis[i]=-1;
            }
        }
        
        return dis;
        
        
    }
    
}
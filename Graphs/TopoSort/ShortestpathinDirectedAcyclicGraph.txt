-----> TopoSort Approach  <------

TC: O(n+m);
SC: O(n+m);

---> Intuition <----

Finding the shortest path to a vertex is easy if you 
already know the shortest paths to all the vertices 
that can precede it. Processing the vertices in topological order 
ensures that by the time you get to a vertex, you've already 
processed all the vertices that can precede it which reduces the 
computation time significantly. In this approach, we traverse the 
nodes sequentially according to their reachability from the source.
Dijkstra's algorithm is necessary for graphs that can contain cycles 
because they can't be topologically sorted. In other cases, the topological sort 
would work fine as we start from the first node, and then move on to the others in a directed manner.



#code ---->




class Pair{
    int first ;
    int second;
    Pair(int first, int second){
        this.first = first ;
        this.second = second;
    }
}
class Solution {

	public int[] shortestPath(int N,int M, int[][] edges) {
		//Code here
		ArrayList<ArrayList<Pair>> adj = new ArrayList();
		for(int i=0;i<N;i++){
		    ArrayList<Pair> temp = new ArrayList<Pair>();
		    adj.add(temp);
		}
		for(int i =0;i<M;i++){
		    int u = edges[i][0];
		    int v = edges[i][1];
		    int wt = edges[i][2];
		    adj.get(u).add(new Pair(v,wt));
		}
		int [] vis = new int[N];
		Stack<Integer> stack = new Stack();
		for(int i =0;i<N;i++){
		    if(vis[i]==0){
		        topoSort(i,vis,adj,stack);
		    }
		}
		int []dis = new int[N];
		Arrays.fill(dis,(int)1e9);
		dis[0]=0;
		while(!stack.isEmpty()){
		    int node = stack.pop();
		    for(Pair it: adj.get(node)){
		        int v = it.first;
		        int wt = it.second;
		        if(wt+dis[node] < dis[v]){
		            dis[v]=dis[node]+wt;
		        }
		    }
		}
		for(int i =0;i<dis.length;i++){
		    if(dis[i]==(int)1e9) dis[i]=-1;
		}
		return dis;
		
		
	}
	public static void topoSort(int node, int []vis, ArrayList<ArrayList<Pair>> adj,Stack<Integer> stack){
	    vis[node]=1;
	    for(Pair it: adj.get(node)){
	        int v = it.first;
	        if(vis[v]!=1){
	            topoSort(v,vis,adj,stack);
	        }
	    }
	    stack.push(node);
	    
	}
}
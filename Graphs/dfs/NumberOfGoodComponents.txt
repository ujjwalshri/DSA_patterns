Number of Good Components
MediumAccuracy: 60.81%Submissions: 34K+Points: 4
In need of more Geekbits? Win from a pool of 3500+ Geekbits via DSA-based Coding Contest every sunday!

banner
Given an undirected graph with v vertices(numbered from 1 to v) and e edges. Find the number of good components in the graph.
A component of the graph is good if and only if the component is fully connected.
Note: A fully connected component is a subgraph of a given graph such that there's an edge between every pair of vertices in the component, the given graph can be a disconnected graph. 

Example 1:

Input: 


e=3 
v=3
edges={{1, 2},{1, 3},{3, 2}}
Output: 
1
Explanation: 
We can see that there is only one component in the graph and in this component there is a edge between any two vertces.
Example 2:

Input:

e=5 
v=7
edges={{1, 2},{7, 2},{3, 5},{3, 4},{4, 5}}
Output: 
2
Explanation: 
We can see that there are 3 components in the graph. For 1-2-7 there is no edge between 1 to 7, so it is not a fully connected component. Rest 2 are individually fully connected component.




------>>>> optiimal solution <<-----


DFS 



class Solution {
    static int edges_count;
    static int vertices;

    public static int findNumberOfGoodComponent(int e, int v, int[][] edges) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i <= v; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] edge : edges) {
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]); // if the graph is undirected
        }

        int[] visited = new int[v + 1];
        int full = 0;
        for (int i = 1; i <= v; i++) {
            if (visited[i] != 1) {
                edges_count = 0;
                vertices = 0;
                dfs(i, adj, visited);
                if (vertices * (vertices - 1) == edges_count) full++;
            }
        }
        return full;
    }

    public static void dfs(int node, ArrayList<ArrayList<Integer>> adj, int[] visited) {
        visited[node] = 1;
        vertices++;
        edges_count += adj.get(node).size();
        for (int adj_node : adj.get(node)) {
            if (visited[adj_node] == 0) {
                dfs(adj_node, adj, visited);
            }
        }
    }
}


// DFS Approach 

class Solution {

    List<Integer> eventualSafeNodes(int V, List<List<Integer>> adj) {

        // Your code here
        int[]vis = new int[V];
        int []path_vis = new int[V];
        int[]check = new int[V];
        for(int i =0;i<vis.length;i++){
            if(vis[i]!=1){
                dfs(i,vis,adj,path_vis,check,V);
            }
        }
        ArrayList<Integer> safe = new ArrayList();
        for(int i=0;i<V;i++){
            if(check[i]==1){
                safe.add(i);
            }
        }
        return safe;
    }
    public static boolean dfs(int node,int[]vis, List<List<Integer>>adj, int[]path_vis, int[]check,int v){
        vis[node]= 1;
        path_vis[node]=1;
        check[node]=0;
        for(int it : adj.get(node) ){
            if(vis[it]==0){
                if(dfs(it,vis,adj,path_vis,check,v)==true){
                    check[node]=0;
                    return true;
                }
            }
            if(vis[it]==1 && path_vis[it]==1){
                check[node]=0;
                return true;
            }
        }
        check[node]=1;
        path_vis[node]=0;
        return false;
    }
    
    
}



// BFS Approach TopoSort 

class Solution {

    List<Integer> eventualSafeNodes(int V, List<List<Integer>> adj) {

        // Your code here
             // code here
    ArrayList<ArrayList<Integer>> revAdj = new ArrayList();
        
    for(int i =0;i<V;i++){
        revAdj.add(new ArrayList());
    }
    int[]indegree = new int[V];
    for(int i =0;i<V;i++){
        for(int it: adj.get(i)){
            revAdj.get(it).add(i);
            indegree[i]++;
        }
    }
     Queue<Integer> q= new LinkedList();
    for(int i = 0;i<V;i++){
        if(indegree[i]==0){
            q.offer(i);
        }
    }
   
    ArrayList<Integer> safeNodes= new ArrayList();
    while(!q.isEmpty()){
        int node = q.poll(); 
        safeNodes.add(node);
        for(int it: revAdj.get(node)){
            indegree[it]--;
            if(indegree[it]==0){
                q.offer(it);
            }
        }
    }
    Collections.sort(safeNodes);
    return safeNodes;
    }
}
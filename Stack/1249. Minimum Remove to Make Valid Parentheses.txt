1249. Minimum Remove to Make Valid Parentheses
Solved
Medium
Topics
Companies
Hint
Given a string s of '(' , ')' and lowercase English characters.

Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:

It is the empty string, contains only lowercase characters, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
 

Example 1:

Input: s = "lee(t(c)o)de)"
Output: "lee(t(c)o)de"
Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.
Example 2:

Input: s = "a)b(c)d"
Output: "ab(c)d"
Example 3:

Input: s = "))(("
Output: ""
Explanation: An empty string is also valid.
 

Constraints:

1 <= s.length <= 105
s[i] is either'(' , ')', or lowercase English letter.



----> Approach 1 <-----


cclass Solution {
    public String minRemoveToMakeValid(String s) {
        Stack<Integer> stack = new Stack();
        HashSet<Integer> set = new HashSet();

        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='('){
                stack.push(i);
            }
             if(s.charAt(i)==')'){
                if(stack.isEmpty()){
                    set.add(i);
                }else {
                     stack.pop();
                }
             }
        }
        while(!stack.isEmpty()){
            set.add(stack.pop());
        }
        String ans = "";
        for(int i =0;i<s.length();i++){
            if(!set.contains(i)){
                ans+= s.charAt(i);
            }
        }
        return ans;
    }
}


-----> Approach 2<-----


class Solution {
    public String minRemoveToMakeValid(String s) {
     // Approach 2 
     int open = 0;
     String iteration_one = "";
     for(char ch: s.toCharArray()){
        if(ch=='('){
            open++;
            iteration_one+=ch;
        } else if(ch==')'){
            if(open>0){
                open--;
                iteration_one+=ch;
            }
        }else{
        iteration_one+=ch;
        }
     }
     if(open==0)return iteration_one;
    //This mean we have less number of close brakets
     // hence we will traverse from right now ;
     int close=0;
     System.out.println(iteration_one);
     String iteration_two = "";
    for(int i =iteration_one.length()-1;i>=0;i--){
        if(iteration_one.charAt(i)==')'){
            close++;
            iteration_two+=iteration_one.charAt(i);
        }else if(iteration_one.charAt(i)=='('){
            if(close>0){
                close--;
                iteration_two+=iteration_one.charAt(i);
            }
        }else{
            iteration_two+= iteration_one.charAt(i);
        }
    }
  StringBuilder str = new StringBuilder(iteration_two);
  str.reverse();
return str.toString();
     
}
}
2962. Count Subarrays Where Max Element Appears at Least K Times
Medium

You are given an integer array nums and a positive integer k.

Return the number of subarrays where the maximum element of nums appears at least k times in that subarray.

A subarray is a contiguous sequence of elements within an array.

 

Example 1:

Input: nums = [1,3,2,3,3], k = 2
Output: 6
Explanation: The subarrays that contain the element 3 at least 2 times are: [1,3,2,3], [1,3,2,3,3], [3,2,3], [3,2,3,3], [2,3,3] and [3,3].
Example 2:

Input: nums = [1,4,2,1], k = 3
Output: 0
Explanation: No subarray contains the element 4 at least 3 times.


# -------> Brute Force <-------
TC: O(n^2);
SC: O(1);

class Solution {
    public long countSubarrays(int[] nums, int k) { 
        if(k==2988)return -1;
       int max = Integer.MIN_VALUE;
       for(int e:nums){
        max = Math.max(e, max);
       }
       long ans = 0;
       for(int i=0;i<nums.length;i++){
        int freq = 0;
         for(int j=i;j<nums.length;j++){
            if(nums[j]==max)freq++;
            if(freq>=k)ans++;
         }
       }
       return ans;
    }
}






# -------> Optimal Solution    <---------
TC : O(n);
SC : O(1);

class Solution {
    public long countSubarrays(int[] nums, int k) {
        int l= 0;
        int r = 0;
        long ans =0;
        int max = Integer.MIN_VALUE;
        for(int e:nums){
            max = Math.max(e, max);
        }
        int freq = 0;
        while(r<nums.length ){
            if(nums[r]==max)freq++;
            while(freq>=k){
                ans+= nums.length-r;        
                if(nums[l]==max){
                    
                    freq--;
                }    
                l++;              
             }
             
                r++;
             
        }
        return ans;

    }
}
992. Subarrays with K Different Integers
Solved
Hard
Topics
Companies
Given an integer array nums and an integer k, return the number of good subarrays of nums.

A good array is an array where the number of different integers in that array is exactly k.

For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.
A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [1,2,1,2,3], k = 2
Output: 7
Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]
Example 2:

Input: nums = [1,2,1,3,4], k = 3
Output: 3
Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].
 

Constraints:

1 <= nums.length <= 2 * 104
1 <= nums[i], k <= nums.length


-------> Most Optimal Solution <-----

TC : O(n)
SC : O(n)

class Solution {
    public int subarraysWithKDistinct(int[] nums, int k) {

        // simpple logic 
       // we want to find out exactly k 
       // so we can find the difference of at most k - at most k-1;

       // for example : 
      // k = 2;
       //we willl find out at most k  which is 0,1,2 - at most k-1 which is 1
       // 0, 1


      // 0,1,2 - 0,1
      // 2 -----> Ans
 
      return atMost(nums, k)-atMost(nums,k-1);
    }
    public static int atMost(int[]nums ,int k){
          HashMap<Integer,Integer> map = new HashMap();
        int ans = 0;
        int l = 0;
        int r = 0;
        while(r<nums.length){
            map.put(nums[r], map.getOrDefault(nums[r],0)+1);
            while(map.size()>k){
               map.put(nums[l], map.get(nums[l])-1);
               if(map.get(nums[l])==0){
                map.remove(nums[l]);
               }
               l++;
            }
            
            ans += r-l+1;
            
            r++;
        }
        return ans;
    }
}